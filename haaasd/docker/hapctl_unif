#!/bin/sh
# sync::uvsclbp01-bck uvsclbp02-bck
# tsync::uvsclbh01-bck uvsclbh02-bck
#
# HAProxy control script designed to allow an easy command line interface
# to controlling HAProxy.
#
# The exit codes returned are:
#       0 - operation completed successfully
#       1 -
#       2 - usage error
#       3 - haproxy could not be started
#       4 - haproxy could not be stopped
#       5 - haproxy could not be started during a restart
#       6 - haproxy could not be restarted during a restart
#       7 - haproxy could not be restarted during a reload restart
#       8 - configuration syntax error
#
#
#
self="$(basename "$0")"

usage(){
    cat <<-EOF

Usage:
 $self ACTION [options]

This script allows an easy command line interface to control HAProxy.

Actions:
 start           Start haproxy
 stop            Stop haproxy
 restart         Restart haproxy if running by sending a SIGHUP or start if not running
 fullstatus      Dump a full status screen; requires lynx and mod_status enabled
 status          Dump a short status screen; requires lynx and mod_status enabled
 reload          Do a reload restart by sending a SIGUSR1 or start if not running
 configtest      Do a configuration syntax test
 help            Print this screen
 rotatelog       Rotation of ze access_log

Options:
 -y              Non interactive mode

The exit codes returned are:
 0               operation completed successfully
 2               usage error
 3               haproxy could not be started
 4               haproxy could not be stopped
 5               haproxy could not be started during a restart
 6               haproxy could not be restarted during a restart
 7               haproxy could not be restarted during a reload restart
 8               configuration syntax error
EOF

}

# Params APP=[VSC|ERS|OFA...] PLATEFORM=[INT1|REC1|PREP|PRD...] MODE=[|SSL]
inst=`basename $0|cut -c7-`
#. /HOME/uxwadm/scripts/gethapenv.sh $inst
APP=`echo $inst|cut -c1-3`
PLATEFORM=`echo $inst|cut -c4-`
HOSTNAME_=`hostname|tr [a-z] [A-Z]`

#
# |||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                              --------------------
#

### REPERTOIRES GENERIQUES ###
##############################

RCONF="/HOME/hapadm/$APP/Config"
RLOG="/HOME/hapadm/$APP/logs/$APP$PLATEFORM"

[ ! -e $RLOG ] && mkdir -p $RLOG

### CONFIGURATION HAPROXY ###
#############################
# process
if [ -e /HOME/hapadm/$APP/Config/haproxy ]; then
  HAPD="sudo /HOME/hapadm/$APP/Config/haproxy"
else
  HAPD="sudo /HOME/haproxy/product/1.3.22/bin/haproxy"
fi

# config
HAP_CONF="$RCONF/hap$APP$PLATEFORM.conf"
# log
HAP_LOGDIR="$RLOG/"
# pid
HAP_PID="$RLOG/haproxy.pid"
# macros
HAP_CHECK_CONF="$HAPD -c -f $HAP_CONF"
HAP_START="$HAPD -V -D -f $HAP_CONF -p $HAP_PID"
VERSION_1="/HOME/hapadm/$APP/version-1"


if [ -e /usr/local/bin/HAP_KILL ]; then
  HAPK="/usr/local/bin/HAP_KILL"
else
  HAPK="/HOME/hapadm/sudo/HAP_KILL"
fi

HAP_STOP="sudo $HAPK -USR1 $HAP_PID"
#HAP_RELOAD="$HAP_START -sf `cat $HAP_PID 2>/dev/null`"

### CONFIGURATION SYSLOG ###
############################
# process
LOGD="/HOME/syslogng/product/3.0.1/sbin/syslog-ng"
# config
LOG_CONF="$RCONF/haplog$APP$PLATEFORM.conf"
# pid
LOG_PID="$RLOG/haplog.pid"
# macros
LOG_START="$LOGD -f $LOG_CONF -p $LOG_PID"
LOG_STOP="/HOME/uxwadm/scripts/SYSLOG_KILL $LOG_PID"

#
STATUSURL="http://$IP:$PORT/stats";
echo -n "** $APP$PLATEFORM $IP:$PORT   ";


#Gere par syslog?
#ARCHDIR=/export/home1/logs/webgl

# a command that outputs a formatted text version of the HTML at the
# url given on the command line.  Designed for lynx, however other
# programs may work.
##LYNX="/export/local/bin/lynx -dump"
LYNX="/HOME/uxwadm/bin/links -dump"


#
# --------------------                              --------------------
# ||||||||||||||||||||   END CONFIGURATION SECTION  ||||||||||||||||||||


ERROR=0
ARGV="$@"
if [ "x$ARGV" = "x" ] ; then
  ARG="help"
else
  ARG=$1
  shift
fi

#Default options value
: ${HAP_INTERACTIVE:=1}

while getopts y flag; do
  case $flag in
    y)
      HAP_INTERACTIVE=0
      ;;
    help)
      ARG=help;
      ;;
  esac
done

shift $(( OPTIND - 1 ));



# check for pidfile
if [ -f $HAP_PID ] ; then
  PID=`cat $HAP_PID`
  if [ "x$PID" != "x" ] && sudo $HAPK -0 $HAP_PID; then
    STATUS="haproxy pid=$PID already running"
    RUNNING=1
  else
    STATUS="haproxy pid=$PID not running"
    RUNNING=0
  fi
else
  STATUS="haproxy (no pid file) not running"
  RUNNING=0
fi


CheckDiff() {

if [ "$HAP_INTERACTIVE" = "0" ];then
    echo "Pas de verification manuelle de la conf"
    return
fi

if [ -e $VERSION_1/hap$APP$PLATEFORM.conf ]; then
 _DIFF=`diff $VERSION_1/hap$APP$PLATEFORM.conf $HAP_CONF`
 if [ ! -z "$_DIFF" ]; then
  read -t 10 -p "Des differences existent entre l ancien et le nouveau fichier de conf HAP. (y) pour valider, (n) pour annuler (v) pour afficher :" _VAR
  if [ $? -eq 1 ]; then
   echo "pas de reponse de l utilisateur"
   if [ $RUNNING -eq 1 ]; then
    echo $STATUS
    #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ start: [  Ok  ] already running"
    exit 0
   else
    echo "start du HAP en version -1"
    $HAPD -V -D -f $VERSION_1/hap$APP$PLATEFORM.conf -p $HAP_PID
   fi
  fi
  while [ $_VAR != y ]
  do
   case $_VAR in
    n)
    echo "reload annule"
    exit 1
    ;;
    v)
    echo $_DIFF
    echo "================================================================================="
    read -p "Des differences existent entre l ancien et le nouveau fichier de conf HAP. (y) pour valider, (n) pour annuler (v) pour afficher :" _VAR
    ;;
    *)
    echo "==================="
    echo "= mauvaise saisie ="
    echo "==================="
    read -p "Des differences existent entre l ancien et le nouveau fichier de conf HAP. (y) pour valider, (n) pour annuler (v) pour afficher :" _VAR
    ;;
   esac
  done
 fi
fi
}

HapStart() {

if [ $RUNNING -eq 1 ]; then
  echo $STATUS
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ start: [  Ok  ] already running"
  exit 0
fi

CheckDiff

if $HAP_START ; then
  if [ ! -d $VERSION_1 ] ;
  then
   mkdir $VERSION_1
  fi
  cp $HAP_CONF $VERSION_1/hap$APP$PLATEFORM.conf
  echo "haproxy started"
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ start: [  Ok  ]"
  #$LOG_START
else
  echo "haproxy could not be started"
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ start: [Echec!]"
  exit 3
fi
}

HapStop() {

if [ $RUNNING -eq 0 ]; then
  echo $STATUS
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM$$HOSTNAME_ stop: [  Ok  ] already stopped"
  exit 0
fi

if $HAP_STOP ; then
  while [ "x`ps -p $PID`| wc -l" == "x2" ]; do sleep 1; echo -n "."; done
    #cat /dev/null > $HAP_PID
    rm -f $HAP_PID
        touch $HAP_PID
    echo "haproxy stopped"
    #$LOG_STOP
    #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ stop: [  Ok  ]"
else
  echo "haproxy could not be stopped"
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ stop: [Echec!]"
  exit 4
fi
}

HapReload() {

if [ $RUNNING -eq 1 ]; then
  echo $STATUS
  #logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ start: [  Ok  ] already running"
fi

$HAP_CHECK_CONF

if [ $? -eq 0 ] ; then
  CheckDiff
  echo "HA Proxy's conf file looks OK..."
  # save previous state
  mv $HAP_PID ${HAP_PID}.old

  sudo $HAPK -TTOU ${HAP_PID}.old
  $HAP_START
  if [ ! -d $VERSION_1 ] ;
  then
   mkdir $VERSION_1
  fi
  cp $HAP_CONF $VERSION_1/hap$APP$PLATEFORM.conf
  if [ $? -eq 0 ] ; then
    echo "New instance successfully loaded, stopping previous one."
    sudo $HAPK -USR1 ${HAP_PID}.old
    rm -f ${HAP_PID}.old
    exit 0
  else
    echo "New instance failed to start, resuming previous one."
    sudo $HAPK -TTIN ${HAP_PID}.old
    rm -f $HAP_PID
    mv ${HAP_PID}.old $HAP_PID
    exit 1
  fi
else
  echo "HA Proxy's conf file is _not_ OK !!!"
  echo "Reload process aborded"
  exit 1
fi

}

case $ARG in
  start)
    HapStart ;;
  stop)
    HapStop ;;
  restart)
    HapStop && HapStart ;;
  reload)
    HapReload ;;
  status)
    $LYNX $STATUSURL | awk ' /process$/ { print; exit } { print } '
        ;;
  fullstatus)
        $LYNX $STATUSURL
        ;;
  configtest)
        if $HAPD -c $CONF ; then
            :
        else
            exit 8
        fi
        ;;
  rotatelog)
        exit 2
        # a voir syslog
        if [ $RUNNING -eq 0 ]; then
            echo "$ARG: haproxy not running"
            exit 9
        fi
        umask 0

        cd $LOGDIR
        if [ "x" = "x" ]
        then
        DATE=`date '+%d-%m-%y-%H-%M-%S'`.$HOSTNAME_
        else
        DATE=`date '+%d-%m-%y-%H-%M-%S'`.ssl.$HOSTNAME_
        fi
        mv access_log access_log.$DATE
        mv error_log error_log.$DATE
        # restart apache
        /export/local/bin/sudo /HOME/hapadm/sudo/HTTP_KILL -USR1 $HAP_PID
        # gzip access_log et error_log
        nice gzip access_log.$DATE ; nice gzip error_log.$DATE
        # deplace dans /export/home1/logs/webgl/
        #mv access_log.$DATE.gz $ARCHDIR/ ; mv error_log.$DATE.gz $ARCHDIR/

        logger -p local7.info -t "xidu DY-$APP" "$APP$PLATEFORM@$HOSTNAME_ rotatelog:   [  OK  ]"
        ;;
  *)
        echo "Illegal action: $ARG"
        usage
        ERROR=2
esac
